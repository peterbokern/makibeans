package com.makibeans.model;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class ProductTest {

    private Product product;
    private ProductVariant variant;
    private ProductVariant variant2;
    private ProductAttribute attribute1;
    private ProductAttribute attribute2;

    @BeforeEach
    void setUp() {
        product = new Product("Product", "Product description", "product_image_url", new Category("Category", "Category description", "image_url", null));
        variant = new ProductVariant(product, new Size("Large"), 10L, "sku", 10L);
        variant2 = new ProductVariant(product, new Size("Small"), 10L, "sku", 10L);
        attribute1 = new ProductAttribute(new AttributeTemplate("Origin"), product);
        attribute2 = new ProductAttribute(new AttributeTemplate("Color"), product);
    }

    @AfterEach
    void tearDown() {
        product = null;
        variant = null;
        variant2 = null;
        attribute1 = null;
        attribute2 = null;
    }

    // Constructor Tests
    @Test
    void shouldReturnNotNullWhenCreated() {
        assertNotNull(product, "The product should not be null after creation");
    }

    @Test
    void shouldReturnCorrectProductNameFromConstructor() {
        assertEquals("Product", product.getProductName(), "The product name should be correctly initialized by the constructor");
    }

    @Test
    void shouldReturnCorrectProductDescriptionFromConstructor() {
        assertEquals("Product description", product.getProductDescription(), "The product description should be correctly initialized by the constructor");
    }

    @Test
    void shouldReturnCorrectCategoryFromConstructor() {
        assertEquals("Category", product.getCategory().getName(), "The category name should be correctly initialized by the constructor");
    }

    @Test
    void shouldReturnCorrectProductImageUrlFromConstructor() {
        assertEquals("product_image_url", product.getProductImageUrl(), "The product image URL should be correctly initialized by the constructor");
    }

    // Setter Tests
    @Test
    void shouldSetProductNameSuccessfully() {
        product.setProductName("New Product");
        assertEquals("New Product", product.getProductName(), "The product name should be set correctly via setter");
    }

    @Test
    void shouldSetProductDescriptionSuccessfully() {
        product.setProductDescription("New Product Description");
        assertEquals("New Product Description", product.getProductDescription(), "The product description should be set correctly via setter");
    }

    @Test
    void shouldSetCategorySuccessfully() {
        Category newCategory = new Category("New Category", "New Category description", "new_image_url", null);
        product.setCategory(newCategory);
        assertEquals("New Category", product.getCategory().getName(), "The category should be set correctly via setter");
    }

    @Test
    void shouldSetProductImageUrlSuccessfully() {
        product.setProductImageUrl("new_product_image_url");
        assertEquals("new_product_image_url", product.getProductImageUrl(), "The product image URL should be set correctly via setter");
    }

    // Getter Tests
    @Test
    void shouldReturnCorrectProductIdWhenRequested() {
        assertNull(product.getId(), "The product ID should be null as it is autogenerated");
    }

    @Test
    void shouldReturnCorrectProductNameWhenRequested() {
        assertEquals("Product", product.getProductName(), "The product name should be 'Product' as initialized");
    }

    @Test
    void shouldReturnCorrectProductDescriptionWhenRequested() {
        assertEquals("Product description", product.getProductDescription(), "The product description should be 'Product description' as initialized");
    }

    @Test
    void shouldReturnCorrectCategoryWhenRequested() {
        assertEquals("Category", product.getCategory().getName(), "The category name should be 'Category' as initialized");
    }

    @Test
    void shouldReturnCorrectProductImageUrlWhenRequested() {
        assertEquals("product_image_url", product.getProductImageUrl(), "The product image URL should be 'product_image_url' as initialized");
    }

    @Test
    void shouldReturnCorrectProductAttributesWhenRequested() {
        product.addProductAttribute(attribute1);
        product.addProductAttribute(attribute2);
        assertEquals(List.of(attribute1, attribute2), product.getProductAttributes(), "The product should have 2 attributes");
    }

    @Test
    void shouldReturnCorrectProductVariantsWhenRequested() {
        product.addProductVariant(variant);
        product.addProductVariant(variant2);
        assertEquals(List.of(variant, variant2), product.getProductVariants(), "The product should have 2 variants");
    }

    // Relationship Tests
    @Test
    void shouldAddProductAttributeSuccessfully() {
        product.addProductAttribute(attribute1);
        assertTrue(product.getProductAttributes().contains(attribute1), "The product should have the attribute");
        assertEquals(product, attribute1.getProduct(), "The attribute should have the correct product");
    }

    @Test
    void shouldRemoveProductAttributeSuccessfully() {
        product.addProductAttribute(attribute1);
        product.removeProductAttribute(attribute1);
        assertFalse(product.getProductAttributes().contains(attribute1), "The product should not have the attribute");
        assertNull(attribute1.getProduct(), "The attribute should not have a product after removal");
    }

    @Test
    void shouldAddProductVariantSuccessfully() {
        product.addProductVariant(variant);
        assertTrue(product.getProductVariants().contains(variant), "The product should have the variant");
        assertEquals(product, variant.getProduct(), "The variant should have the correct product");
    }

    @Test
    void shouldRemoveProductVariantSuccessfully() {
        product.addProductVariant(variant);
        product.removeProductVariant(variant);
        assertFalse(product.getProductVariants().contains(variant), "The product should not have the variant");
        assertNull(variant.getProduct(), "The variant should not have a product after removal");
    }

    // toString Method Test
    @Test
    void testToString() {
        String expected = "Product(id=null, productName=Product, productDescription=Product description, productImageUrl=product_image_url)";
        assertEquals(expected, product.toString(), "The toString method should return the correct format");
    }
}
